# Setting up the environment
from subgrounds.subgrounds import Subgrounds
from subgrounds.subgraph import SyntheticField, FieldPath
import pandas as pd
pd.set_option('display.float_format', lambda x: '%.9f' % x)
from datetime import datetime

# Load the subgraph
sg = Subgrounds()
uni_v2 = sg.load_subgraph('https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2')

# Determining field paths
uni_v2_daily = uni_v2.Query.uniswapDayDatas(
    orderBy = uni_v2.UniswapDayData.date,
    orderDirection = 'desc',
    first = 365
)

uni_v2_factory = uni_v2.Query.uniswapFactories

##exclude pairs related to the fake Uniswap volumes generated by Delta Financial:
##https://decrypt.co/63458/11-billion-fake-uniswap-volume-defi-project-dex-clash

fake_pairs = ['0x23fe4ee3bd9bfd1152993a7954298bb4d426698f',
                '0xe5ffe183ae47f1a0e4194618d34c5b05b98953a8',
                '0xf9c1fa7d41bf44ade1dd08d37cc68f67ae75bf92',
                '0x382a9a8927f97f7489af3f0c202b23ed1eb772b5',
                '0x7d7e813082ef6c143277c71786e5be626ec77b20']

uni_v2_pairs = uni_v2.Query.pairs(
    orderBy = uni_v2.Pair.volumeUSD,
    orderDirection = 'desc',
    first = 10,
    where = {
        'id_not_in' : fake_pairs
    },
)

##exclude tokens related to the fake Uniswap volumes generated by Delta Financial:
##https://decrypt.co/63458/11-billion-fake-uniswap-volume-defi-project-dex-clash

fake_tokens = ['0x05934eba98486693aaec2d00b0e9ce918e37dc3f',
              '0x3d7e683fc9c86b4d653c9e47ca12517440fad14e',
              '0xfae9c647ad7d89e738aba720acf09af93dc535f7',
              '0x7296368fe9bcb25d3ecc19af13655b907818cc09',
              '0x9ea3b5b4ec044b70375236a281986106457b20ef']

uni_v2_tokens = uni_v2.Query.tokens(
    orderBy = uni_v2.Token.tradeVolumeUSD,
    orderDirection = 'desc',
    first = 10,
    ##exclude tokens related to the fake Uniswap volumes generated by Delta Financial:
    ##https://decrypt.co/63458/11-billion-fake-uniswap-volume-defi-project-dex-clash
    where = {
        'id_not_in' : fake_tokens
    }
)

# Constructing Synthetic Fields

##Synthetic field for "date_norm" column which has an easily readable date format.
uni_v2.UniswapDayData.dateNorm = SyntheticField(
    f = lambda date: str(datetime.fromtimestamp(date).date()),
    type_ = SyntheticField.STRING,
    deps = uni_v2.UniswapDayData.date
)

##Synthetic field for "dailyFeesUSD" column so we can derive the trading fees collected based on trading volumes
##Fees collected per trade on Uniswap v2 is 0.3% or 0.003
uni_v2.UniswapDayData.dailyFeesUSD = SyntheticField(
    f = lambda dailyVolumeUSD: dailyVolumeUSD * 0.003,
    type_ = SyntheticField.FLOAT,
    deps = uni_v2.UniswapDayData.dailyVolumeUSD
)

##Synthetic Field for a "pair names" column from the pairs field path so we can easily identify the trading pairs
uni_v2.Pair.pairName = SyntheticField(
    f = lambda token0, token1: token0+'-'+token1,
    type_ = SyntheticField.STRING,
    deps = [
        uni_v2.Pair.token0.symbol,
        uni_v2.Pair.token1.symbol
    ]
)

# Function that pulls the latest data point for any queried metric
def latest(sg: Subgrounds, fpath: FieldPath):
    data = sg.execute(sg.mk_request([fpath]))
    return fpath.extract_data(data)[0]
